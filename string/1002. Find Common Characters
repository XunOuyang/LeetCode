// C++ version. This is an easy problem, however not that easy to implement in C++
// Using Python will make the code way much shorter.

class Solution {
public:
    vector<string> commonChars(vector<string>& A) {
        vector<string> res;
        struct mystruct {
            int value = INT_MAX;
        };
  //      vector<int> counter(26, INT_MAX);
        unordered_map<int, mystruct> counter;
        counter.reserve(26);
        for(string a:A) {
            vector<int> t(26, 0);
            for(auto c:a) {
                t[c-'a']++;
            }
            for(int i=0; i<26; i++) {
                counter[i].value = min(counter[i].value, t[i]);
            }
        }
        for(int i=0; i < 26; i++) {
            if(counter[i].value) {
                string t(1, i+'a');
                while(counter[i].value) {
                    res.push_back(t);
                    counter[i].value--;
                }
            }
        }
        return res;
    }
};
