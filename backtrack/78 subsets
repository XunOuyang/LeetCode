# Python 
```
class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        self.dfs(nums, 0, [], res)
        return res
    
    def dfs(self, nums, index, path, res):
        res.append(path[:])
        for i in xrange(index,len(nums)):
            path.extend([nums[i]])
            self.dfs(nums, i+1, path, res)
            path.pop()
    """
    The code above is more standardized. Save as C++
    the code above equals to the code below:
    def dfs(self, nums, index, path, res):
        res.append(path)
        for i in xrange(index,len(nums)):
            self.dfs(nums, i+1, path + [nums[i]], res)
    
    """
    
# C++ 
    
class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> temp;
        backtrack(nums, 0, temp, res);
        return res;
    }
    
private:
    void backtrack(vector<int>& nums, int index, vector<int>& temp, vector<vector<int>>& res) {
        res.push_back(temp);
        for(int i=index; i < nums.size(); i++) {
            temp.push_back(nums[i]);
            backtrack(nums, i + 1, temp, res);
            temp.pop_back();
        }
    }
}; 
