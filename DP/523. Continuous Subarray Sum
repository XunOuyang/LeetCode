// this is a problem with tons of corner case, the thinking process of solving this problem is so different than the others
// others usually need to started with a specific data structure, and come up with a "formula" to solve. 
// this problem is more brutal force but need to cover different corner case.
// refer to https://leetcode.com/problems/continuous-subarray-sum/discuss/99545/Share-my-O(n)-C%2B%2B-accumulation-modulo-solution-with-thinking-process-and-explanation
// the link above gave a very detailed thinking process.

class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        for(int i = 0; i < nums.size() - 1; i++) {
            if(nums[i]==0 && nums[i+1]==0)
                return true;
        }
        if(k == 0) 
            return false;
        else {
            unordered_map<int, int> m;
            m.insert(pair<int, int>(nums[0], 0));
            for(int i=1; i < nums.size(); i++) {
                nums[i] += nums[i-1];
                nums[i] %= k;
                if(nums[i] == 0)
                    return true;
                if(m.count(nums[i]) && m[nums[i]] - i <= -2)
                    return true;
                m.insert(pair<int, int>(nums[i], i));
            }
        }
        return false;
    }
        
};
